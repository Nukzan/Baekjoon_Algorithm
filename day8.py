# -*- coding: utf-8 -*-
"""day8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VAvtuLh7iNp-hbGWKyXAmQhiBWkTUq8Z
"""

# 1152
#문제 : 영어 대소문자와 띄어쓰기만으로 이루어진 문자열이 주어진다.
# 이 문자열에는 몇 개의 단어가 있을까? 이를 구하는 프로그램을 작성하시오.
# 단, 한 단어가 여러 번 등장하면 등장한 횟수만큼 모두 세어야 한다.

# 입력 : 첫 줄에 영어 대소문자와 띄어쓰기로 이루어진 문자열이 주어진다.
# 이 문자열의 길이는 1,000,000을 넘지 않는다.
# 단어는 띄어쓰기 한 개로 구분되며, 공백이 연속해서 나오는 경우는 없다.
# 또한 문자열의 앞과 뒤에는 공백이 있을 수도 있다.
# The Curious Case of Benjamin Button

# 출력 : 첫째 줄에 단어의 개수를 출력한다.
# 6

a = input().split()
print(len(a))

# 2908
#문제 : 상수는 수를 다른 사람과 다르게 거꾸로 읽는다.
# 예를 들어, 734와 893을 칠판에 적었다면, 상수는 이 수를 437과 398로 읽는다.
# 따라서, 상수는 두 수중 큰 수인 437을 큰 수라고 말할 것이다.
# 두 수가 주어졌을 때, 상수의 대답을 출력하는 프로그램을 작성하시오.

# 입력 : 첫째 줄에 상근이가 칠판에 적은 두 수 A와 B가 주어진다.
# 두 수는 같지 않은 세 자리 수이며, 0이 포함되어 있지 않다.
# 734 893

# 출력 : 첫째 줄에 상수의 대답을 출력한다.
# 437

a, b = map(str, input().split())

aa = int(a[::-1]) # 문자열 뒤집는 방법
bb = int(b[::-1])

if aa > bb :
  print(aa)
else :
  print(bb)

# 5622
#문제 : 전화를 걸고 싶은 번호가 있다면, 숫자를 하나를 누른 다음에 금속 핀이 있는 곳 까지 시계방향으로 돌려야 한다. 숫자를 하나 누르면 다이얼이 처음 위치로 돌아가고, 다음 숫자를 누르려면 다이얼을 처음 위치에서 다시 돌려야 한다.
# 숫자 1을 걸려면 총 2초가 필요하다. 1보다 큰 수를 거는데 걸리는 시간은 이보다 더 걸리며, 한 칸 옆에 있는 숫자를 걸기 위해선 1초씩 더 걸린다.
# 상근이의 할머니는 전화 번호를 각 숫자에 해당하는 문자로 외운다. 즉, 어떤 단어를 걸 때, 각 알파벳에 해당하는 숫자를 걸면 된다. 예를 들어, UNUCIC는 868242와 같다.
# 할머니가 외운 단어가 주어졌을 때, 이 전화를 걸기 위해서 필요한 최소 시간을 구하는 프로그램을 작성하시오

# 입력 : 첫째 줄에 알파벳 대문자로 이루어진 단어가 주어진다.
# 단어의 길이는 2보다 크거나 같고, 15보다 작거나 같다.
# UNUCIC

# 출력 : 첫째 줄에 다이얼을 걸기 위해서 필요한 최소 시간을 출력한다.
# 36

x = str(input())
li = []
li2 = []

a = ['ABC', 'DEF', 'GHI', 'JKL','MNO' ,'PQRS', 'TUV', 'WXYZ']

for i in x :
  for n in range(len(a)):
    if i in a[n]:
      li.append(n+2)

for j in li:
  li2.append(j+1)

print(sum(li2))

# 2941
#문제 : 예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다.
# 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다.
# 예를 들어, ljes=njak은 크로아티아 알파벳 6개(lj, e, š, nj, a, k)로 이루어져 있다.
# 단어가 주어졌을 때, 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.
# dž는 무조건 하나의 알파벳으로 쓰이고, d와 ž가 분리된 것으로 보지 않는다.
# lj와 nj도 마찬가지이다. 위 목록에 없는 알파벳은 한 글자씩 센다.

# 입력 : 첫째 줄에 최대 100글자의 단어가 주어진다.
# 알파벳 소문자와 '-', '='로만 이루어져 있다.
# 단어는 크로아티아 알파벳으로 이루어져 있다.
# 문제 설명의 표에 나와있는 알파벳은 변경된 형태로 입력된다.
# ljes=njak

# 출력 : 입력으로 주어진 단어가 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.
# 6

a = str(input())
b = ['c=','c-','dz=','d-','lj','nj','s=','z=']
li = []

for i in b:
  if i in a:
    a = a.replace(i,'X')  # 문자열 변환 함수 replace
print(len(a))

# 1316
#문제 : 그룹 단어란 단어에 존재하는 모든 문자에 대해서,
# 각 문자가 연속해서 나타나는 경우만을 말한다.
# 예를 들면, ccazzzzbb는 c, a, z, b가 모두 연속해서 나타나고,
# kin도 k, i, n이 연속해서 나타나기 때문에 그룹 단어이지만,
# aabbbccb는 b가 떨어져서 나타나기 때문에 그룹 단어가 아니다.
# 단어 N개를 입력으로 받아 그룹 단어의 개수를 출력하는 프로그램을 작성하시오.

# 입력 : 첫째 줄에 단어의 개수 N이 들어온다. N은 100보다 작거나 같은 자연수이다.
# 둘째 줄부터 N개의 줄에 단어가 들어온다.
# 단어는 알파벳 소문자로만 되어있고 중복되지 않으며, 길이는 최대 100이다.
# 3
# happy
# new
# year

# 출력 : 첫째 줄에 그룹 단어의 개수를 출력한다.
# 3

n = int(input())
cnt = 0


for i in range(n):
  a = input()
  wlen = len(a)
  pre_alp = ''  
  for j in a:
    if j == pre_alp:
        wlen -= 1 # 직전의 문자와 같으면 단어의 길이를 줄임 > 직전으로 연결되지 않은 문자는 단어의 길이가 줄지 않음 (이로인해 set 함수와 차이 발생 가능성)
    pre_alp = j
  alp_set = set(a)  # string의 중복을 제거한 알파벳 세트

  if len(alp_set) == wlen:  # 중복 알파벳 제거 세트와 직전 연결된 알파벳 묶음의 길이가 같으면 모두 연속으로 존재하는 그룹문자
    cnt += 1

print(cnt)